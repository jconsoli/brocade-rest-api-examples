#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Copyright 2023, 2024, 2025 Consoli Solutions, LLC.  All rights reserved.

**License**

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
the License. You may also obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
language governing permissions and limitations under the License.

The license is free for single customer use (internal applications). Use of this module in the production,
redistribution, or service delivery for commerce requires an additional license. Contact jack@consoli-solutions.com for
details.

**Description**

Creates a MAPS report in Excel Workbook format from a brcddb project

**Version Control**

+-----------+---------------+---------------------------------------------------------------------------------------+
| Version   | Last Edit     | Description                                                                           |
+===========+===============+=======================================================================================+
| 1.0.0     | 06 Mar 2024   | Initial launch                                                                        |
+-----------+---------------+---------------------------------------------------------------------------------------+
| 1.0.1     | 03 Apr 2024   | Added version numbers of imported libraries.                                          |
+-----------+---------------+---------------------------------------------------------------------------------------+
| 1.0.2     | 06 Dec 2024   | Updated comments only.                                                                |
+-----------+---------------+---------------------------------------------------------------------------------------+
| 1.0.3     | 01 Mar 2025   | Error message enhancements.                                                           |
+-----------+---------------+---------------------------------------------------------------------------------------+
| 1.0.4     | 25 Aug 2025   | Use brcddb.util.util.get_import_modules to dynamically determined imported libraries. |
+-----------+---------------+---------------------------------------------------------------------------------------+
"""
__author__ = 'Jack Consoli'
__copyright__ = 'Copyright 2024, 2025 Consoli Solutions, LLC'
__date__ = '25 Aug 2025'
__license__ = 'Apache License, Version 2.0'
__email__ = 'jack_consoli@yahoo.com'
__maintainer__ = 'Jack Consoli'
__status__ = 'Released'
__version__ = '1.0.4'

import os
import brcdapi.log as brcdapi_log
import brcdapi.gen_util as gen_util
import brcdapi.util as brcdapi_util
import brcdapi.file as brcdapi_file
import brcdapi.excel_util as excel_util
import brcdapi.excel_fonts as excel_fonts
import brcddb.brcddb_project as brcddb_project
import brcddb.brcddb_common as brcddb_common
import brcddb.brcddb_switch as brcddb_switch
import brcddb.report.maps as maps_report

_DOC_STRING = False  # Should always be False. Prohibits any code execution. Only useful for building documentation

# debug input (for copy and paste into Run->Edit Configurations->script parameters):
# -i test/test_output -o test/maps_report -log _logs

# _STAND_ALONE: True: Executes as a standalone module taking input from the command line. False: Does not automatically
# execute. This is useful when importing this module into another module that calls psuedo_main().
_STAND_ALONE = True  # See note above

# Input parameter definitions
_input_d = dict(
    i=dict(h='Required. Name of input file generated by capture.py, combine.py, or multi_capture.py. Extension '
             '".json" is automatically added if no extension present.'),
    o=dict(h='Required. Name of report file. ".xlsx" automatically appended.'),
)
_input_d.update(gen_util.parseargs_log_d.copy())

_std_font = excel_fonts.font_type('std')
_link_font = excel_fonts.font_type('link')
_hdr2_font = excel_fonts.font_type('hdr_2')
_hdr1_font = excel_fonts.font_type('hdr_1')
_align_wrap = excel_fonts.align_type('wrap')
_align_wrap_vc = excel_fonts.align_type('wrap_vert_center')
_align_wrap_c = excel_fonts.align_type('wrap_center')
_border_thin = excel_fonts.border_type('thin')


def pseudo_main(proj_obj, outf):
    """Basically the main(). Did it this way so that it can easily be used as a standalone module or called from another

    :param proj_obj: Project object
    :type proj_obj: brcddb.classes.project.ProjectObj
    :param outf: Name of output file
    :type outf: str
    :return: Exit code. See exist codes in brcddb.brcddb_common
    :rtype: int
    """
    global _hdr1_font

    ec, wb, content_d, i = brcddb_common.EXIT_STATUS_OK, excel_util.new_report(), dict(), 0
    for switch_obj in proj_obj.r_switch_objects():
        content_d.update(
            {switch_obj.r_obj_key(): dict(name=brcddb_switch.best_switch_name(switch_obj, did=True, fid=True))}
        )
        for action in (maps_report.maps_policy, maps_report.maps_groups, maps_report.maps_rules):
            action(wb, content_d, switch_obj, i, i)
            i += 1

    # Add the table of contents
    sheet = wb.create_sheet(index=0, title='contents')
    sheet.column_dimensions['A'].width = 2
    sheet.column_dimensions['B'].width = 78
    row = col = 1
    sheet.merge_cells(start_row=row, start_column=col, end_row=row, end_column=col+1)
    excel_util.cell_update(sheet, row, col, 'Contents', font=_hdr1_font, align=_align_wrap)
    row += 2
    for d in content_d.values():
        col = 1
        sheet.merge_cells(start_row=row, start_column=col, end_row=row, end_column=col+1)
        excel_util.cell_update(sheet, row, col, d['name'], font=_hdr2_font, align=_align_wrap)
        row, col = row+1, 2
        for key in ('policy', 'group', 'rule'):
            excel_util.cell_update(sheet, row, col, key, font=_link_font, align=_align_wrap, link='#'+d[key]+'!A1')
            row += 1

    # Save the report.
    brcdapi_log.log('Saving ' + outf, echo=True)
    try:
        excel_util.save_report(wb, outf)
    except PermissionError:
        brcdapi_log.log(['', 'Permission error writing ' + outf + '. File may be open in another application.'],
                        echo=True)
        ec = brcddb_common.EXIT_STATUS_ERROR
    except FileNotFoundError:
        brcdapi_log.log(['', 'Write report failed. Folder in ' + outf + ' does not exist.'], echo=True)
        ec = brcddb_common.EXIT_STATUS_ERROR

    return ec


def _get_input():
    """Parses the module load command line

    :return: Exit code. See exist codes in brcddb.brcddb_common
    :rtype: int
    """
    global __version__, _input_d

    ec = brcddb_common.EXIT_STATUS_OK

    # Get command line input
    args_d = gen_util.get_input('Create a MAPS report in Excel', _input_d)

    # Set up logging
    brcdapi_log.open_log(
        folder=args_d['log'],
        suppress=args_d['sup'],
        no_log=args_d['nl'],
        version_d=brcdapi_util.get_import_modules()
    )

    # Get the project object
    e_buf_l, proj_obj, inf = list(), None, brcdapi_file.full_file_name(args_d['i'], '.json')
    args_i_help = args_d['i']
    input_file = brcdapi_file.full_file_name(args_d['i'], '.json')
    output_file = brcdapi_file.full_file_name(args_d['o'], '.xlsx')
    try:
        proj_obj = brcddb_project.read_from(input_file)
    except FileNotFoundError:
        args_i_help += ' ERROR: Not found.'
        ec = brcddb_common.EXIT_STATUS_ERROR
    except FileExistsError:
        args_i_help += ' ERROR: Folder in file name does not exist.'
        ec = brcddb_common.EXIT_STATUS_ERROR
    except PermissionError:
        args_i_help += ' ERROR: You do not have access rights to read this file or folder.'
        ec = brcddb_common.EXIT_STATUS_ERROR
    # User feedback
    ml = [os.path.basename(__file__) + ', ' + __version__,
          'In file, -i:         ' + args_i_help,
          'Out file, -o:        ' + args_d['o'],
          'Log, -log:           ' + str(args_d['log']),
          'No log, -nl:         ' + str(args_d['nl']),
          'Suppress, -sup:      ' + str(args_d['sup']),
          '',]
    brcdapi_log.log(ml, echo=True)

    return pseudo_main(proj_obj, output_file) if ec == brcddb_common.EXIT_STATUS_OK else ec


##################################################################
#
#                    Main Entry Point
#
###################################################################

# Read in the project file from which the report is to be created and convert to a project object
# Create project

if _DOC_STRING:
    print('_DOC_STRING is True. No processing')
    exit(0)

if _STAND_ALONE:
    _ec = _get_input()
    brcdapi_log.close_log(['', 'Processing Complete. Exit code: ' + str(_ec)], echo=True)
    exit(_ec)
