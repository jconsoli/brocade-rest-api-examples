#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Copyright 2025 Consoli Solutions, LLC.  All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
the License. You may also obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
language governing permissions and limitations under the License.

The license is free for single customer use (internal applications). Use of this module in the production,
redistribution, or service delivery for commerce requires an additional license. Contact jack@consoli-solutions.com for
details.

**Description**

Scans a project for chassis, fabric (including zoning and SCC policy), and logical switch information.

**Version Control**

+-----------+---------------+---------------------------------------------------------------------------------------+
| Version   | Last Edit     | Description                                                                           |
+===========+===============+=======================================================================================+
| 1.0.0     | 25 Aug 2025   | Initial launch                                                                        |
+-----------+---------------+---------------------------------------------------------------------------------------+
"""
__author__ = 'Jack Consoli'
__copyright__ = 'Copyright 2025 Consoli Solutions, LLC'
__date__ = '25 Aug 2025'
__license__ = 'Apache License, Version 2.0'
__email__ = 'jack_consoli@yahoo.com'
__maintainer__ = 'Jack Consoli'
__status__ = 'Development'
__version__ = '1.0.0'

import sys
import os
import datetime
import brcdapi.log as brcdapi_log
import brcdapi.gen_util as gen_util
import brcdapi.file as brcdapi_file
import brcdapi.util as brcdapi_util
import brcddb.brcddb_project as brcddb_project
import brcddb.util.copy as brcddb_copy
import brcddb.brcddb_common as brcddb_common

_DOC_STRING = False  # Should always be False. Prohibits any code execution. Only useful for building documentation
# _STAND_ALONE: True: Executes as a standalone module taking input from the command line. False: Does not automatically
# execute. This is useful when importing this module into another module that calls psuedo_main().
_STAND_ALONE = True  # See note above


_input_d = dict(
    i=dict(h='Required. Name of input file generated by capture.py, combine.py, or multi_capture.py. Extension '
             '".json" is automatically added.'),
)
_input_d.update(gen_util.parseargs_log_d)


def pseudo_main(in_file):
    """Basically the main(). Did it this way so that it can easily be used as a standalone module or called externally.

    :param in_file: Name of the input folder containing capture.py or combine.py output
    :type in_file: str
    :return: Exit code. See brcddb_common.EXIT_STATUS_*
    :rtype: int
    """
    # Read the project file, -i
    try:
        proj_obj = brcddb_project.read_from(in_file)
        if proj_obj is not None:  # Error messages are sent to the log in brcddb_project.read_from() if proj_obj is None
            brcdapi_log.log(brcddb_project.scan(proj_obj, logical_switch=True), echo=True)
            return brcddb_common.EXIT_STATUS_OK
    except FileNotFoundError:
        brcdapi_log.log('Input file, ' + in_file + ', not found', echo=True)
    except FileExistsError:
        brcdapi_log.log('Folder in ' + in_file + ' does not exist', echo=True)
    except PermissionError:
        brcdapi_log.log('You do not have access rights to read ' + in_file + '.', echo=True)

    return brcddb_common.EXIT_STATUS_INPUT_ERROR


def _get_input():
    """Parses the module load command line

    :return ec: Error code
    :rtype ec: int
    """
    global __version__, _input_d

    # Get command line input
    buf = 'Scans a project for chassis, fabric (including zoning and SCC policy), and logical switch information.'
    args_d = gen_util.get_input(buf, _input_d)

    # Set up logging
    brcdapi_log.open_log(
        folder=args_d['log'],
        suppress=args_d['sup'],
        no_log=args_d['nl'],
        version_d=brcdapi_util.get_import_modules()
    )

    # User feedback
    ml = [
        os.path.basename(__file__) + ', ' + __version__,
        'Input file, -i:      ' + args_d['i'],
        'Log, -log:           ' + str(args_d['log']),
        'No log, -nl:         ' + str(args_d['nl']),
        'Suppress, -sup:      ' + str(args_d['sup']),
        '',
    ]
    brcdapi_log.log(ml, echo=True)

    return pseudo_main(brcdapi_file.full_file_name(args_d['i'], '.json'))


##################################################################
#
#                    Main Entry Point
#
###################################################################
if _DOC_STRING:
    print('_DOC_STRING is True. No processing')
    exit(brcddb_common.EXIT_STATUS_OK)

if _STAND_ALONE:
    _ec = _get_input()
    brcdapi_log.close_log(['', 'Processing Complete. Exit code: ' + str(_ec)], echo=True)
    exit(_ec)
